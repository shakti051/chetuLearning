1. convert an array to LinkedList

	static Node constructLL(int arr[]) {
        // code 
        Node head = new Node(arr[0]);
        Node mover = head;
        for(int i=1;i<arr.length;i++){
            Node temp = new Node(arr[i]);
            mover.next = temp;
            mover = temp;
        }   
    return head;
    }

2. Insert at begning and end of LinkedList

class Solution
{
    //Function to insert a node at the beginning of the linked list.
    Node insertAtBeginning(Node head, int x)
    {
        // code
        Node newNode = new Node(x);
        newNode.next = head;
        head = newNode;
        return head;
    }
    
    //Function to insert a node at the end of the linked list.
    Node insertAtEnd(Node head, int x)
    {
        // code here
        Node newNode = new Node(x);
 
        if (head == null) {
            head = newNode;
            return head;
        }
 
        Node last = head;
        while (last.next != null) {
            last = last.next;
        }
 
        last.next = new_node;
        
        return head;
    }

}

3. Count nodes of LinkedList:-

class Solution
{
    //Function to count nodes of a linked list.
    public static int getCount(Node head)
    {
        //Code here
        int count = 0;
        Node temp = head;
        while(temp!= null){
              temp = temp.next;
              count++;
        }
        return count;
    }
}

4. search element in a LinkedList

class Solution {
    static boolean searchKey(int n, Node head, int key) {
        // Code here
        Node temp = head;
        while(temp!= null){
            if(temp.data==key)
            return true;
              temp = temp.next;
        }
        return false;
    }
}

4. Reverse a linked List Iterative:-

class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode temp = head;
        ListNode prev = null;
        while(temp!=null){
            ListNode front = temp.next;
            temp.next = prev;
            prev = temp;
            temp = front;
        }
        return prev;
    }
}

Time Complexity: O(N) The code traverses the entire linked list once, where 'n' is the number of nodes in the list. This traversal has a linear time complexity, O(n).

Space Complexity: O(1) The code uses only a constant amount of additional space, regardless of the linked list's length.



Reverse a linked List Recursive:-

class Solution {
    public ListNode reverseList(ListNode head) {
        if(head==null || head.next==null)
        return head;
        ListNode newHead = reverseList(head.next);
        ListNode front = head.next;
        front.next = head;
        head.next = null;
        return newHead;
    }
}

Time Complexity: O(N), Visiting over every node one time 
Auxiliary Space: O(N), Function call stack space

5. Find Length of loop in a linkedlist

class Solution
{
    //Function to find the length of a loop in the linked list.
    static int countNodesinLoop(Node head)
    {
        //Add your code here.
        Node slow = head;
        Node fast = head;
        while(fast!=null && fast.next!=null){
            slow = slow.next;
            fast = fast.next.next;
                if(slow==fast)
                    return lengthOfLoop(slow,fast);
        }
        return 0;
    }
    private static int lengthOfLoop(Node slow,Node fast){
        int count = 1;
        slow = slow.next;
        while(slow!=fast){
            slow = slow.next;
            count++;
        }
    return count;    
    }
}

6. Detect loop in a LinkedList:-

 public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while(fast!=null && fast.next!=null){
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast)
            return true;
        }
    return false;
    }
}

7. Detect starting point of loop in a LinkedList

    public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while(fast!=null && fast.next!=null){
            slow = slow.next;
            fast = fast.next.next;
            if(slow==fast){
                slow = head;
                 while(slow!=fast){
                slow = slow.next;
                fast = fast.next;
              }   
            return slow;
            } 
        }
        return null;            
    }
}

8. Check LinkedList is palindrome

class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while(fast.next!=null && fast.next.next!=null){
            slow = slow.next;
            fast = fast.next.next;         
        }

        ListNode newHead = reverseLinkedList(slow.next);
        ListNode first = head;
        ListNode second = newHead;

        while(second!=null){
            if(first.val!= second.val){
                reverseLinkedList(newHead);
                return false;
            }
            first = first.next;
            second = second.next;                          
        }
        reverseLinkedList(newHead);
        return true;
    }

    private static ListNode reverseLinkedList(ListNode head){
            if(head == null || head.next==null)
            return head;
            ListNode newHead = reverseLinkedList(head.next);
            ListNode front = head.next;
            front.next = head;
            head.next = null;
            return newHead;
    }
}

Time Complexity: O (2* N) The algorithm traverses the linked list twice, dividing it into halves. 
During the first traversal, it reverses one-half of the list, and during the second traversal, it compares the elements of both halves. As each traversal covers N/2 elements, the time complexity is calculated as O(N/2 + N/2 + N/2 + N/2), which simplifies to O(2N), ultimately representing O(N). 

Space Complexity: O(1) The approach uses a constant amount of additional space regardless of the size of the input linked list. 


9. Odd Even LinkedList:- Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.

class Solution {
    public ListNode oddEvenList(ListNode head) {
        if(head == null || head.next == null)
        return head;
        ListNode odd = head;
        ListNode even = head.next;
        ListNode evenHead = head.next;
        while(even!=null && even.next!=null){
                odd.next = odd.next.next;
                even.next = even.next.next;
                odd = odd.next;
                even = even.next;
        }
        odd.next = evenHead;
        return head;        
    }
}

10. Remove Nth Node From End of List:-

    class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode fast = head;
        ListNode slow = head;
        for(int i=0;i<n;i++)
        fast = fast.next;

        if(fast==null)
        return head.next;

        while(fast.next!=null){
              fast = fast.next;
              slow = slow.next;  
        }
            ListNode delNode = slow.next;
            slow.next = slow.next.next;
            delNode = null;
    return head;                                   
    }
}

11. Delete middle node of a LinkedList:-

    class Solution {
    public ListNode deleteMiddle(ListNode head) {
        if(head==null || head.next == null)
        return null;

        ListNode slow = head;
        ListNode fast = head;
        fast= fast.next.next;
        while(fast!= null && fast.next!=null){
            slow = slow.next;
            fast= fast.next.next;                      
        }
        ListNode middle = slow.next;
        slow.next = slow.next.next;
        middle = null;
        return head;       
    }
}

